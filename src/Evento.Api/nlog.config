<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true">

  <!-- enable asp.net core layout renderers -->
  <extensions>
    <add assembly="NLog.Web.AspNetCore"/>
  </extensions>

  <variable name="dockerlogDirectory" value="/data/logs/evento-api"/>

  <!-- the targets to write to -->
  <targets>
    <!-- File Target for all log messages with basic details -->
    <target xsi:type="File" 
            name="allfile" 
            fileName="${dockerlogDirectory}/all.log"
            layout="${longdate}|${event-properties:item=EventId_Id:whenEmpty=0}|${uppercase:${level}}|${logger}|${message} ${exception:format=tostring}" 
            archiveFileName="${dockerlogDirectory}/archived/{#}.log"
            archiveEvery="Day"
            archiveNumbering="Rolling"
            maxArchiveFiles="7"
            concurrentWrites="true" />

    <!-- File Target for own log messages with extra web details using some ASP.NET core renderers -->
    <target xsi:type="File" 
            name="ownFile-web" 
            fileName="${dockerlogDirectory}/own.log"
            layout="${longdate}|${event-properties:item=EventId_Id:whenEmpty=0}|${uppercase:${level}}|${logger}|${message} ${exception:format=tostring}|url: ${aspnet-request-url}|action: ${aspnet-mvc-action}|${callsite}| body: ${aspnet-request-posted-body}"
            archiveFileName="${dockerlogDirectory}/archived/{#}.log"
            archiveEvery="Day"
            archiveNumbering="Rolling"
            maxArchiveFiles="7"
            concurrentWrites="true" />

    <target name="coloredConsole" xsi:type="ColoredConsole" useDefaultRowHighlightingRules="false"
            layout="${longdate}|${pad:padding=5:inner=${level:uppercase=true}}|${message} ${exception:format=tostring}|action: ${aspnet-mvc-action}|${callsite}" >
	    <highlight-row condition="level == LogLevel.Debug" foregroundColor="DarkGray" />
	    <highlight-row condition="level == LogLevel.Info" foregroundColor="Gray" />
	    <highlight-row condition="level == LogLevel.Warn" foregroundColor="Yellow" />
	    <highlight-row condition="level == LogLevel.Error" foregroundColor="Red" />
	    <highlight-row condition="level == LogLevel.Fatal" foregroundColor="Red" backgroundColor="White" />
    </target>

    <!--Console Target for hosting lifetime messages to improve Docker / Visual Studio startup detection -->
    <target xsi:type="Console" name="lifetimeConsole" layout="${level:truncate=4:tolower=true}\: ${logger}[0]${newline}      ${message}${exception:format=tostring}" />
    <!--Console Target for hosting lifetime messages to improve Docker / Visual Studio startup detection -->
    <target xsi:type="Console" name="allConsole" layout="${longdate}|${event-properties:item=EventId_Id:whenEmpty=0}|${uppercase:${level}}|${logger}|${message} ${exception:format=tostring}|url: ${aspnet-request-url}|action: ${aspnet-mvc-action}|${callsite}| body: ${aspnet-request-posted-body}" />
  </targets>

  <!-- rules to map from logger name to target -->
  <rules>
    <!--All logs, including from Microsoft-->
    <logger name="*" minlevel="Info" writeTo="allfile" />

    <logger name="*" minlevel="Debug" writeTo="coloredConsole" />

    <!--Output hosting lifetime messages to console target for faster startup detection -->
    <!--<logger name="Microsoft.Hosting.Lifetime" minlevel="Info" writeTo="ownFile-web" final="true" />-->

    <!--Skip non-critical Microsoft logs and so log only own logs (BlackHole) -->
    <logger name="Microsoft.*" maxlevel="Info" final="true" />
    <logger name="System.Net.Http.*" maxlevel="Info" final="true" />

    <logger name="*" minlevel="Trace" writeTo="ownFile-web" />
  </rules>
</nlog>
